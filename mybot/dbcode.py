from bot import bot #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
from messages import * #–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë —Å —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
import sqlite3
import config
from telebot import types
from datetime import datetime

# Dictionary to store user data
user_data = {}
@bot.message_handler(commands=['start'])
def start_handler(message):
    # Check if user data exists in the database
    try:
        with sqlite3.connect('users.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(f"SELECT * FROM users WHERE chat_id={message.chat.id}")
            user = cursor.fetchone()
    except sqlite3.Error as e:
        config.logger.error(f"Error while accessing the database: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user:
        # If user data exists, display a message with the selected data
        selected_data = {"direction": user[2], "course": user[3], "group": user[4]}
        start_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–í—ã –≤—ã–±—Ä–∞–ª–∏:
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {selected_data['direction']}
–ö—É—Ä—Å: {selected_data['course']}
–ì—Ä—É–ø–ø–∞: {selected_data['group']}

üõ†‚ù§Ô∏è*–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* ‚Äî _@{config.DEVELOPER_USERNAME}_
"""
    else:
        # If user data does not exist, display a default message
        start_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *DF NITU MISIS Bot!*

üõ†‚ù§Ô∏è*–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* ‚Äî _@{config.DEVELOPER_USERNAME}_
"""

    # Create authorization keyboard
    autorize = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_btn = types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    reference_btn = types.KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞")
    profile_btn = types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
    autorize.add(confirm_btn)
    autorize.add(reference_btn, profile_btn)

    # Send message with keyboard
    bot.send_message(message.chat.id, text=start_message, reply_markup=autorize, parse_mode="Markdown")

@bot.message_handler(commands=['add'])
def add_handler(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.username == config.DEVELOPER_USERNAME:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã
        add_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        for direction in config.DIRECTIONS:
            direction_btn = types.KeyboardButton(direction)
            add_key.add(direction_btn)
        add_key.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=add_key)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_next_step_handler(message, get_schedule_data)
    else:
        bot.send_message(message.chat.id, NO_RULE)

def get_schedule_data(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    selected_data = message.text
    if selected_data not in config.DIRECTIONS:
        bot.send_message(message.chat.id, NO_CORRECT)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[message.chat.id] = {"direction": selected_data}
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ 
    add_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for course in config.COURSES:
        course_btn = types.KeyboardButton(course)
        add_key.add(course_btn)
    add_key.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", reply_markup=add_key)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    bot.register_next_step_handler(message, get_schedule_data2)

def get_schedule_data2(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, CANCEL_MSG)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –∏ –≥—Ä—É–ø–ø–µ
    selected_data = message.text
    if selected_data not in config.COURSES:
        bot.send_message(message.chat.id, NO_CORRECT)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    user_data[message.chat.id]["course"] = selected_data
    group_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if user_data[message.chat.id]["direction"] in ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"] and user_data[message.chat.id]["course"] in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å","3 –∫—É—Ä—Å"]:
       group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
       group_b_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ë")
       group_key.add(group_a_btn, group_b_btn)
    elif user_data[message.chat.id]["direction"] in ["–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"] and user_data[message.chat.id]["course"] in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å"]:
        group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
        group_b_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ë")
        group_key.add(group_a_btn, group_b_btn)
    else:
        group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
        group_key.add(group_a_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É", reply_markup=group_key)

    bot.register_next_step_handler(message, get_schedule_data3)

def get_schedule_data3(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, CANCEL_MSG)
        return
    else:
        user_data[message.chat.id]["group_name"] = message.text
        print(user_data[message.chat.id]["direction"],user_data[message.chat.id]["group_name"])
        for key, value in config.GROUPS.items():
            print(key,value)
            if user_data[message.chat.id]["direction"] == key and user_data[message.chat.id]["group_name"] in value:
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                bot.register_next_step_handler(message, save_student_data)
                break
def save_student_data(message):
    schedule = message.text
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∫—É—Ä—Å–µ –∏ –≥—Ä—É–ø–ø–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    direction = user_data[message.chat.id]["direction"]
    course = user_data[message.chat.id]["course"]
    group_name = user_data[message.chat.id]["group_name"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (direction, course, group_name, schedule, created_at) VALUES (?, ?, ?, ?, ?)",
                   (direction, course, group_name, schedule, datetime.now()))
        conn.commit()
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        config.logger.error(f"Error while saving schedule data: {e}")
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{config.DEVELOPER_USERNAME} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏")
    finally:
        conn.close()

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    del user_data[message.chat.id]


def save_schedule(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –Ω–µ–¥–µ–ª–∏, –¥–Ω–µ –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    selected_data = message.text.split()
    if len(selected_data) != 5 or selected_data[0] not in ["–ß–∏—Å–ª–∏—Ç–µ–ª—å", "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"] or selected_data[1] not in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"] or selected_data[2] not in ["8:00-9:20", "9:30-10:50", "11:10-12:30"]:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with sqlite3.connect('users.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(f"INSERT INTO users (chat_id, status, direction, course, group_name, auditory, time_slot, upper_week, lower_week) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (message.chat.id, "active", user_data[message.chat.id]['direction'], user_data[message.chat.id]['course'], user_data[message.chat.id]['group_name'], selected_data[3], selected_data[2], selected_data[0], selected_data[0]))
            conn.commit()
    except sqlite3.Error as e:
        config.logger.error(f"Error while accessing the database: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text in ["–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–°–ø—Ä–∞–≤–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å", "–ù–∞–∑–∞–¥","–û—Ç–º–µ–Ω–∞"])
def menu_handler(message):
    if message.text == "–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ (—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
        status_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        student_btn = types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")
        teacher_btn = types.KeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        back_btn = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        status_key.add(student_btn, teacher_btn, back_btn)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", reply_markup=status_key)

    elif message.text == "–°–ø—Ä–∞–≤–∫–∞":
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, HELP_MESSAGE)
    
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, f"‚öôÔ∏è –í–∞—à *Telegram ID* ‚Äî {message.chat.id}", parse_mode="Markdown")
    elif message.text == "–ù–∞–∑–∞–¥":
        start_handler(message)
    
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        status_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        student_btn = types.KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")
        teacher_btn = types.KeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        back_btn = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        status_key.add(student_btn, teacher_btn, back_btn)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", reply_markup=status_key)

    else:

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫
        bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫. *–ù–ï –°–¢–û–ò–¢* –ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –ª–∏—à–Ω–µ–µ!",
                         parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text in ["–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"])
def user_type_handler(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id] = {"status": message.text}

    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        it_btn = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
        economy_btn = types.KeyboardButton("–≠–∫–æ–Ω–æ–º–∏–∫–∞")
        metallygry_btn = types.KeyboardButton("–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è")
        cancel_btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        direction_key.add(it_btn, economy_btn, metallygry_btn, cancel_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=direction_key)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_next_step_handler(message, get_students_direction)

    elif message.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        key = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cancel_btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        key.add(cancel_btn)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é", reply_markup=key)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_next_step_handler(message, get_teachers_schedule)
    
def get_teachers_schedule(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        menu_handler(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è –≤ —Å–ø–∏—Å–∫–µ
        surname = message.text.strip().title()
        surnames = ["–¢–∞–±–∞—Ä–æ–≤", "–°–∞—Ñ–∞—Ä–æ–≤"]
        if surname in surnames:
            autorize = types.ReplyKeyboardMarkup(resize_keyboard=True)
            confirm_btn = types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            reference_btn = types.KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞")
            profile_btn = types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
            autorize.add(confirm_btn)
            autorize.add(reference_btn, profile_btn)
            bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {surname}\n–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",reply_markup=autorize)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            autorize = types.ReplyKeyboardMarkup(resize_keyboard=True)
            confirm_btn = types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            reference_btn = types.KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞")
            profile_btn = types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
            autorize.add(confirm_btn)
            autorize.add(reference_btn, profile_btn)
            bot.send_message(message.chat.id, "–í–∞—à–µ–π —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ...", reply_markup=autorize)

def get_students_direction(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        menu_handler(message)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id]["direction"] = message.text

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        course_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        first_crs = types.KeyboardButton("1 –∫—É—Ä—Å")
        second_crs = types.KeyboardButton("2 –∫—É—Ä—Å")
        third_crs = types.KeyboardButton("3 –∫—É—Ä—Å")
        fourth_crs = types.KeyboardButton("4 –∫—É—Ä—Å")
        course_key.add(first_crs, second_crs, third_crs, fourth_crs)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å", reply_markup=course_key)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        bot.register_next_step_handler(message, get_students_course)


def get_students_course(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id]["course"] = message.text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    group_key = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data[message.chat.id]["direction"] == "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" and message.text in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å"]:
        group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
        group_b_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ë")
        group_key.add(group_a_btn, group_b_btn)
    elif user_data[message.chat.id]["direction"] == "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è" and message.text in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å"]:
        group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
        group_b_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ë")
        group_key.add(group_a_btn, group_b_btn)
    else:
        group_a_btn = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ –ê")
        group_key.add(group_a_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É", reply_markup=group_key)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(message, save_user_data)


def save_user_data(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id]["group"] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    selected_data = user_data[message.chat.id]
    start_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–í—ã –≤—ã–±—Ä–∞–ª–∏:
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {selected_data['direction']}
–ö—É—Ä—Å: {selected_data['course']}
–ì—Ä—É–ø–ø–∞: {selected_data['group']}

üõ†‚ù§Ô∏è*–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* ‚Äî _@{config.DEVELOPER_USERNAME}_"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    autorize = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_btn = types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    reference_btn = types.KeyboardButton(text="–°–ø—Ä–∞–≤–∫–∞")
    profile_btn = types.KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
    autorize.add(confirm_btn)
    autorize.add(reference_btn, profile_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, text=start_message, reply_markup=autorize, parse_mode="Markdown")

@bot.message_handler(commands=['schedule'])
def schedule_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        with sqlite3.connect('users.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(f"SELECT * FROM users WHERE chat_id={message.chat.id}")
            user = cursor.fetchone()
    except sqlite3.Error as e:
        config.logger.error(f"Error while accessing the database: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not user:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    direction = user[2]
    course = user[3]
    group_name = user[4]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    schedule = get_schedule(direction, course, group_name)

    if not schedule:
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, schedule)

bot.infinity_polling(none_stop=True)
